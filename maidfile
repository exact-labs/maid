# env goes at the top of the file
BOOL = false
STRING = 'test'
TYPE = '%{dir.home} %{env.STRING} %{arg.1}'
ARR = ['hello', 'world']
VERSION='0.3.0'

# hidden tasks
[tasks._build_macos]
path = ""
info = "build maid macos"
script = [
"cargo build --release", 
"mv target/release/exact-maid build/maid",
"zip build/maid_%{env.VERSION}_darwin_amd64.zip build/maid",
"rm build/maid",
]

[tasks._build_linux]
path = ""
info = "build maid linux"
script = [
"cargo build --release --target x86_64-unknown-linux-musl", 
"mv target/release/exact-maid build/maid",
"zip build/maid_%{env.VERSION}_linux_amd64.zip build/maid",
"rm build/maid",
]

[tasks._build_windows]
path = ""
info = "build maid windows"
script = [
"cargo build --release --target x86_64-pc-windows-gnu", 
"mv target/release/exact-maid build/maid",
"zip build/maid_%{env.VERSION}_windows_amd64.zip build/maid",
"rm build/maid",
]

# tasks in table format
[tasks]
clean = { info = "remove binary", path = "", script = "rm maid" }
test = { info = "test maid", path = "", script = "echo hello world" }
debug = { info = "debug env", path = "", script = ["echo %{env.BOOL}", "echo %{env.STRING}", "echo %{arg.1}", "echo %{dir.current}", "echo %{dir.home}", "echo %{env.TYPE}", "echo %{env.ARR}", "echo %{os.platform}", "echo %{os.arch}"] }
bad-task = { info = "bad task", path = "", script = ["this_does_not_exist"] }
buildall = { info = "build all", path = "", script = ["rm -rf build", "mkdir build", "maid _build_macos", "maid _build_linux", "maid _build_windows"] }

# seperated task
# script #2 uses :arg operator
[tasks.build]
path = ""
info = "build maid"
script = [
"cargo build --release", 
"mv target/release/exact-maid maid",
]
